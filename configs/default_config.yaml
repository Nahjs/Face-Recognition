# === 人脸识别项目配置 YAML 文件 ===
# 本文件用于集中管理项目的所有可配置参数。
# 通过修改此文件，可以调整模型结构、训练超参数、数据路径、推理行为等。
#
# --- 文件结构说明 ---
# 1.  `global_settings`: 包含适用于项目所有部分的全局参数。
#     这些参数首先被加载，可以被后续的特定配置块覆盖。
# 2.  `active_config`: 字符串，指定当前要激活哪个详细配置块。
#     例如，设置为 'resnet_arcface_config' 将加载下面同名的配置块。
# 3.  具体配置块 (例如 `vgg_ce_config`, `resnet_arcface_config`):
#     每个块针对一种特定的实验设置（如模型骨干+损失函数的组合）。
#     块内的参数会覆盖 `global_settings` 中的同名参数。
#
# --- 参数覆盖规则 ---
# 1.  `global_settings` 作为基础。
# 2.  `active_config` 指定的配置块指定的配置块中的参数覆盖 `global_settings`。
# 3.  通过命令行传递的参数 (例如 `python train.py --learning_rate 0.0001`) 具有最高优先级，
#     会覆盖YAML文件中定义的所有同名参数。

# --- 活动配置选择 (修改这里的 'active_config' 的值来切换要使用的配置块) ---
# 脚本会根据这里的设置，从下方对应的配置块中加载训练、模型、损失函数等参数。
# 请确保下方存在与此名称对应的配置块。
# 可选项: 'vgg_ce_steplr_config', 'vgg_ce_multistep_config', 'vgg_ce_cosine_config', 'vgg_ce_reduce_lr_config', 'vgg_ce_warm_restarts_config',
#          'vgg_arcface_steplr_config', 'vgg_arcface_multistep_config', 'vgg_arcface_cosine_config', 'vgg_arcface_reduce_lr_config', 'vgg_arcface_warm_restarts_config',
#          'resnet_ce_steplr_config', 'resnet_ce_multistep_config', 'resnet_ce_cosine_config', 'resnet_ce_reduce_lr_config', 'resnet_ce_warm_restarts_config',
#          'resnet_arcface_steplr_config', 'resnet_arcface_multistep_config', 'resnet_arcface_cosine_config', 'resnet_arcface_reduce_lr_lr_config', 'resnet_arcface_warm_restarts_config'
active_config: vgg_ce_steplr_config # <--- 您可以根据需要修改这里

# --- 全局设置 (这些设置会被下面的具体配置块覆盖) ---
global_settings:
  use_gpu: true                  # 是否使用GPU训练
  resume: false                  # 是否从检查点恢复训练
  seed: 42                       # 随机种子，用于保证实验的可重复性
  data_dir: data                 # 数据集根目录
  model_save_dir: model          # 模型保存目录
  epochs: 1                      # 默认训练总轮数 (这里设置全局轮数)
  log_interval: 10               # 训练日志打印间隔 (steps)
  image_size: 112                # 输入模型图像尺寸 (高和宽相同)
  num_classes: 100               # 数据集中类别的数量 (根据实际数据集调整)
  batch_size: 64                 # 训练批大小
  learning_rate: 0.1             # 默认初始学习率
  optimizer_type: Momentum       # 默认优化器类型 (Momentum 或 AdamW)
  optimizer_params:              # 默认优化器参数
    momentum: 0.9                # Momentum 参数
    weight_decay: 0.0005         # 权重衰减
    # AdamW 参数 (如果 optimizer_type 为 AdamW 时生效)
    # beta1: 0.9
    # beta2: 0.999
    # epsilon: 1e-08
  lr_scheduler_type: StepDecay      # 默认学习率调度器类型 (StepDecay, MultiStepDecay, etc.)
  lr_scheduler_params:           # 默认学习率调度器参数
    stepdecay: # <--- 键名匹配工厂函数查找 (无下划线)
      step_size: 30              # StepDecay 的步长
      gamma: 0.1                 # StepDecay 的衰减因子
    multistepdecay: # <--- 键名匹配工厂函数查找 (无下划线)
      milestones: [30, 60, 90]   # MultiStepDecay 的里程碑
      gamma: 0.1                 # MultiStepDecay 的衰减因子
    exponentialdecay: # <--- 键名匹配工厂函数查找 (无下划线)
      gamma: 0.9                 # ExponentialDecay 的衰减因子
    reduceonplateau: # <--- 键名匹配工厂函数查找 (无下划线)
      mode: 'min'                # ReduceOnPlateau 模式 ('min' 或 'max')
      factor: 0.1                # ReduceOnPlateau 衰减因子
      patience: 10               # ReduceOnPlateau 耐心值
      threshold: 0.0001          # ReduceOnPlateau 阈值
      threshold_mode: 'rel'      # ReduceOnPlateau 阈值模式 ('rel' 或 'abs')
      cooldown: 0                # ReduceOnPlateau 冷却周期
      min_lr: 0                  # ReduceOnPlateau 最小学习率
      eps: 1e-08                 # ReduceOnPlateau eps
    cosineannealingdecay: # <--- 键名匹配工厂函数查找 (无下划线)
      T_max: 100                 # CosineAnnealingDecay 的最大迭代次数 (通常设置为总epoch数)
      eta_min: 0                 # CosineAnnealingDecay 的最小学习率
    polynomialdecay: # <--- 键名匹配工厂函数查找 (无下划线)
      decay_steps: 100           # PolynomialDecay 的衰减步数
      end_lr: 0                  # PolynomialDecay 的最终学习率
      power: 1.0                 # PolynomialDecay 的多项式次方
      cycle: False               # PolynomialDecay 是否循环
    cosineannealingwarmrestarts: # <--- 键名匹配工厂函数查找 (无下划线)
      T_0: 10                    # CosineAnnealingWarmRestarts 的第一个周期的迭代次数 (通常是一个epoch的step数或总epoch数的一部分)
      T_mult: 2                  # CosineAnnealingWarmRestarts 的周期长度乘数
      eta_min: 0                 # CosineAnnealingWarmRestarts 的最小学习率
      # last_epoch: -1           # 如果从检查点恢复，需要根据当前epoch设置
    warmup:                      # 学习率预热设置
      use_warmup: True           # 是否使用预热
      warmup_steps: 500          # 预热的步数
      start_lr: 0.001            # 预热开始时的学习率

  model_type: resnet             # 默认模型骨干类型 (vgg 或 resnet)
  model:                         # 默认模型参数
    vgg_params:
      dropout_rate: 0.5          # VGG Dropout 率
    resnet_params:
      feature_dim: 512           # ResNet 输出特征维度
      nf: 32                     # ResNet 初始特征通道数的乘子
      n_resnet_blocks: 3         # ResNet block 的数量 (不包含stem和最后的avgpool)

  loss_type: arcface             # 默认损失/头部类型 (cross_entropy 或 arcface)
  loss:                          # 默认损失/头部参数
    cross_entropy_params: {}     # CrossEntropy 不需要额外参数
    arcface_params:
      arcface_m1: 1.0            # ArcFace m1 参数
      arcface_m2: 0.5            # ArcFace m2 参数
      arcface_m3: 0.0            # ArcFace m3 参数
      arcface_s: 64.0            # ArcFace s 参数

  dataset_params:                # 数据集相关参数
    train_list: trainer.list     # 训练列表文件
    eval_list: test.list         # 评估列表文件
    num_workers: 8               # 数据加载器 worker 数量 (Windows下建议设为0)
    mean: [0.5, 0.5, 0.5]        # 图像标准化均值
    std: [0.5, 0.5, 0.5]        # 图像标准化标准差

  infer:                         # 推理相关参数
    face_library_path:           # 人脸库特征文件路径 (用于 ArcFace 推理和对比)
    recognition_threshold: 0.0   # 人脸识别阈值 (ArcFace 推理)
    label_file: readme.json      # 类别标签文件
    infer_visualize: True        # 是否可视化推理结果

  compare:                       # 对比相关参数
    compare_threshold: 0.8       # 人脸对比阈值 (ArcFace 对比)
    compare_visualize: True      # 是否可视化对比结果

  create_library:                # 创建人脸库相关参数
    output_library_path:         # 输出人脸库特征文件路径

# --- 具体配置块 (覆盖全局设置) ---

vgg_ce_steplr_config:
  model_type: vgg
  loss_type: cross_entropy
  model:
    vgg_params:
      dropout_rate: 0.5
  batch_size: 64
  learning_rate: 0.1
  # epochs: 5 # <-- 已移除
  image_size: 64
  num_classes: 6
  lr_scheduler_type: StepDecay
  lr_scheduler_params:
    stepdecay: # 键名匹配
      step_size: 30
      gamma: 0.1
    warmup:
      use_warmup: True
      warmup_steps: 500
      start_lr: 0.001

vgg_ce_multistep_config:
  model_type: vgg
  loss_type: cross_entropy
  model:
    vgg_params:
      dropout_rate: 0.5
  batch_size: 64
  learning_rate: 0.1
  # epochs: 100 # <-- 已移除
  image_size: 64
  num_classes: 6
  lr_scheduler_type: MultiStepDecay
  lr_scheduler_params:
    multistepdecay: # 键名匹配
      milestones: [30, 60, 90]
      gamma: 0.1
    warmup:
      use_warmup: True
      warmup_steps: 500
      start_lr: 0.001

vgg_ce_cosine_config:
  model_type: vgg
  loss_type: cross_entropy
  model:
    vgg_params:
      dropout_rate: 0.5
  batch_size: 64
  learning_rate: 0.1
  # epochs: 100 # <-- 已移除
  image_size: 64
  num_classes: 6
  lr_scheduler_type: CosineAnnealingDecay
  lr_scheduler_params:
    cosineannealingdecay: # 键名匹配
      T_max: 100 # 通常设置为总epochs (现在会使用全局的epochs值)
      eta_min: 0
    warmup:
      use_warmup: True
      warmup_steps: 500
      start_lr: 0.001

vgg_ce_reduce_lr_config:
  model_type: vgg
  loss_type: cross_entropy
  model:
    vgg_params:
      dropout_rate: 0.5
  batch_size: 64
  learning_rate: 0.1
  # epochs: 100 # <-- 已移除
  image_size: 64
  num_classes: 6
  lr_scheduler_type: ReduceOnPlateau
  lr_scheduler_params:
    reduceonplateau: # 键名匹配
      mode: 'min'
      factor: 0.1
      patience: 10
      threshold: 0.0001
      threshold_mode: 'rel'
      cooldown: 0
      min_lr: 0
      eps: 1e-08 # Preserve this here for now, will remove in factory
    warmup:
      use_warmup: False
      warmup_steps: 0
      start_lr: 0.001

vgg_ce_warm_restarts_config:
  model_type: vgg
  loss_type: cross_entropy
  model:
    vgg_params:
      dropout_rate: 0.5
  batch_size: 64
  learning_rate: 0.1
  # epochs: 100 # <-- 已移除 (注意这里的 T_0 是周期，需要和总epoch数配合)
  image_size: 64
  num_classes: 6
  lr_scheduler_type: CosineAnnealingWarmRestarts
  lr_scheduler_params:
    cosineannealingwarmrestarts: # 键名匹配
      T_0: 10 # 例如，每10个epoch重启一次
      T_mult: 2
      eta_min: 0
    warmup:
      use_warmup: True
      warmup_steps: 500
      start_lr: 0.001

vgg_arcface_steplr_config:
  model_type: vgg
  loss_type: arcface
  model:
    vgg_params:
      dropout_rate: 0.5
  loss:
    arcface_params:
      arcface_m1: 1.0
      arcface_m2: 0.5
      arcface_m3: 0.0
      arcface_s: 64.0
  batch_size: 64
  learning_rate: 0.1
  # epochs: 50 # <-- 已移除
  image_size: 64
  num_classes: 6 # ArcFace 需要 num_classes 来初始化头部
  lr_scheduler_type: StepDecay
  lr_scheduler_params:
    stepdecay: # 键名匹配
      step_size: 15 # 步长根据总epoch调整 (现在是全局epochs)
      gamma: 0.1
    warmup:
      use_warmup: True
      warmup_steps: 500
      start_lr: 0.001
  create_library:
    output_library_path: model/face_library_vgg_arcface_steplr.pkl
  infer:
    face_library_path: model/face_library_vgg_arcface_steplr.pkl # 推理时使用训练好的库
    recognition_threshold: 0.5 # ArcFace 推理阈值
  compare:
    compare_threshold: 0.8 # ArcFace 对比阈值

vgg_arcface_multistep_config:
  model_type: vgg
  loss_type: arcface
  model:
    vgg_params:
      dropout_rate: 0.5
  loss:
    arcface_params:
      arcface_m1: 1.0
      arcface_m2: 0.5
      arcface_m3: 0.0
      arcface_s: 64.0
  batch_size: 64
  learning_rate: 0.1
  # epochs: 100 # <-- 已移除
  image_size: 64
  num_classes: 6
  lr_scheduler_type: MultiStepDecay
  lr_scheduler_params:
    multistepdecay: # 键名匹配
      milestones: [30, 60, 90]
      gamma: 0.1
    warmup:
      use_warmup: True
      warmup_steps: 500
      start_lr: 0.001
  create_library:
    output_library_path: model/face_library_vgg_arcface_multistep.pkl
  infer:
    face_library_path: model/face_library_vgg_arcface_multistep.pkl
    recognition_threshold: 0.5
  compare:
    compare_threshold: 0.8

vgg_arcface_cosine_config:
  model_type: vgg
  loss_type: arcface
  model:
    vgg_params:
      dropout_rate: 0.5
  loss:
    arcface_params:
      arcface_m1: 1.0
      arcface_m2: 0.5
      arcface_m3: 0.0
      arcface_s: 64.0
  batch_size: 64
  learning_rate: 0.1
  # epochs: 100 # <-- 已移除
  image_size: 64
  num_classes: 6
  lr_scheduler_type: CosineAnnealingDecay
  lr_scheduler_params:
    cosineannealingdecay: # 键名匹配
      T_max: 100 # 通常设置为总epochs (现在会使用全局的epochs值)
      eta_min: 0
    warmup:
      use_warmup: True
      warmup_steps: 500
      start_lr: 0.001
  create_library:
    output_library_path: model/face_library_vgg_arcface_cosine.pkl
  infer:
    face_library_path: model/face_library_vgg_arcface_cosine.pkl
    recognition_threshold: 0.5
  compare:
    compare_threshold: 0.8

vgg_arcface_reduce_lr_config:
  model_type: vgg
  loss_type: arcface
  model:
    vgg_params:
      dropout_rate: 0.5
  loss:
    arcface_params:
      arcface_m1: 1.0
      arcface_m2: 0.5
      arcface_m3: 0.0
      arcface_s: 64.0
  batch_size: 64
  learning_rate: 0.1
  # epochs: 100 # <-- 已移除
  image_size: 64
  num_classes: 6
  lr_scheduler_type: ReduceOnPlateau
  lr_scheduler_params:
    reduceonplateau: # 键名匹配
      mode: 'min'
      factor: 0.1
      patience: 10
      threshold: 0.0001
      threshold_mode: 'rel'
      cooldown: 0
      min_lr: 0
      eps: 1e-08 # Preserve this here for now, will remove in factory
    warmup:
      use_warmup: False
      warmup_steps: 0
      start_lr: 0.001
  create_library:
    output_library_path: model/face_library_vgg_arcface_reduce_lr.pkl
  infer:
    face_library_path: model/face_library_vgg_arcface_reduce_lr.pkl
    recognition_threshold: 0.5
  compare:
    compare_threshold: 0.8


vgg_arcface_warm_restarts_config:
  model_type: vgg
  loss_type: arcface
  model:
    vgg_params:
      dropout_rate: 0.5
  loss:
    arcface_params:
      arcface_m1: 1.0
      arcface_m2: 0.5
      arcface_m3: 0.0
      arcface_s: 64.0
  batch_size: 64
  learning_rate: 0.1
  # epochs: 100 # <-- 已移除 (注意这里的 T_0 是周期，需要和总epoch数配合)
  image_size: 64
  num_classes: 6
  lr_scheduler_type: CosineAnnealingWarmRestarts
  lr_scheduler_params:
    cosineannealingwarmrestarts: # 键名匹配
      T_0: 10 # 例如，每10个epoch重启一次
      T_mult: 2
      eta_min: 0
    warmup:
      use_warmup: True
      warmup_steps: 500
      start_lr: 0.001
  create_library:
    output_library_path: model/face_library_vgg_arcface_warm_restarts.pkl
  infer:
    face_library_path: model/face_library_vgg_arcface_warm_restarts.pkl
    recognition_threshold: 0.5
  compare:
    compare_threshold: 0.8

resnet_ce_steplr_config:
  model_type: resnet
  loss_type: cross_entropy
  model:
    resnet_params:
      feature_dim: 512
      nf: 32
      n_resnet_blocks: 3
  batch_size: 32
  learning_rate: 0.01
  optimizer_type: AdamW
  optimizer_params:
    weight_decay: 0.0001
  # epochs: 100 # <-- 已移除
  image_size: 112
  num_classes: 100
  lr_scheduler_type: StepDecay
  lr_scheduler_params:
    stepdecay: # 键名匹配
      step_size: 30
      gamma: 0.1
    warmup:
      use_warmup: True
      warmup_steps: 500
      start_lr: 0.001

resnet_ce_multistep_config:
  model_type: resnet
  loss_type: cross_entropy
  model:
    resnet_params:
      feature_dim: 512
      nf: 32
      n_resnet_blocks: 3
  batch_size: 32
  learning_rate: 0.01
  optimizer_type: AdamW
  optimizer_params:
    weight_decay: 0.0001
  # epochs: 100 # <-- 已移除
  image_size: 112
  num_classes: 100
  lr_scheduler_type: MultiStepDecay
  lr_scheduler_params:
    multistepdecay: # 键名匹配
      milestones: [30, 60, 90]
      gamma: 0.1
    warmup:
      use_warmup: True
      warmup_steps: 500
      start_lr: 0.001

resnet_ce_cosine_config:
  model_type: resnet
  loss_type: cross_entropy
  model:
    resnet_params:
      feature_dim: 512
      nf: 32
      n_resnet_blocks: 3
  batch_size: 32
  learning_rate: 0.01
  optimizer_type: AdamW
  optimizer_params:
    weight_decay: 0.0001
  # epochs: 100 # <-- 已移除
  image_size: 112
  num_classes: 100
  lr_scheduler_type: CosineAnnealingDecay
  lr_scheduler_params:
    cosineannealingdecay: # 键名匹配
      T_max: 100 # 通常设置为总epochs (现在会使用全局的epochs值)
      eta_min: 0
    warmup:
      use_warmup: True
      warmup_steps: 500
      start_lr: 0.001

resnet_ce_reduce_lr_config:
  model_type: resnet
  loss_type: cross_entropy
  model:
    resnet_params:
      feature_dim: 512
      nf: 32
      n_resnet_blocks: 3
  batch_size: 32
  learning_rate: 0.01
  optimizer_type: AdamW
  optimizer_params:
    weight_decay: 0.0001
  # epochs: 100 # <-- 已移除
  image_size: 112
  num_classes: 100
  lr_scheduler_type: ReduceOnPlateau
  lr_scheduler_params:
    reduceonplateau: # 键名匹配
      mode: 'min'
      factor: 0.1
      patience: 10
      threshold: 0.0001
      threshold_mode: 'rel'
      cooldown: 0
      min_lr: 0
      eps: 1e-08 # Preserve this here for now, will remove in factory
    warmup:
      use_warmup: False
      warmup_steps: 0
      start_lr: 0.001

resnet_ce_warm_restarts_config:
  model_type: resnet
  loss_type: cross_entropy
  model:
    resnet_params:
      feature_dim: 512
      nf: 32
      n_resnet_blocks: 3
  batch_size: 32
  learning_rate: 0.01
  optimizer_type: AdamW
  optimizer_params:
    weight_decay: 0.0001
  # epochs: 100 # <-- 已移除 (注意这里的 T_0 是周期，需要和总epoch数配合)
  image_size: 112
  num_classes: 100
  lr_scheduler_type: CosineAnnealingWarmRestarts
  lr_scheduler_params:
    cosineannealingwarmrestarts: # 键名匹配
      T_0: 10
      T_mult: 2
      eta_min: 0
    warmup:
      use_warmup: True
      warmup_steps: 500
      start_lr: 0.001

resnet_arcface_steplr_config:
  model_type: resnet
  loss_type: arcface
  model:
    resnet_params:
      feature_dim: 512
      nf: 32
      n_resnet_blocks: 3
  loss:
    arcface_params:
      arcface_m1: 1.0
      arcface_m2: 0.5
      arcface_m3: 0.0
      arcface_s: 64.0
  batch_size: 32
  learning_rate: 0.001
  optimizer_type: AdamW
  optimizer_params:
    weight_decay: 0.0001
  # epochs: 100 # <-- 已移除
  image_size: 112
  num_classes: 100 # ArcFace 需要 num_classes 来初始化头部
  lr_scheduler_type: StepDecay
  lr_scheduler_params:
    stepdecay: # 键名匹配
      step_size: 30
      gamma: 0.1
    warmup:
      use_warmup: True
      warmup_steps: 500
      start_lr: 0.001
  create_library:
    output_library_path: model/face_library_resnet_arcface_steplr.pkl
  infer:
    face_library_path: model/face_library_resnet_arcface_steplr.pkl
    recognition_threshold: 0.5
  compare:
    compare_threshold: 0.8

resnet_arcface_multistep_config:
  model_type: resnet
  loss_type: arcface
  model:
    resnet_params:
      feature_dim: 512
      nf: 32
      n_resnet_blocks: 3
  loss:
    arcface_params:
      arcface_m1: 1.0
      arcface_m2: 0.5
      arcface_m3: 0.0
      arcface_s: 64.0
  batch_size: 32
  learning_rate: 0.001
  optimizer_type: AdamW
  optimizer_params:
    weight_decay: 0.0001
  # epochs: 100 # <-- 已移除
  image_size: 112
  num_classes: 100
  lr_scheduler_type: MultiStepDecay
  lr_scheduler_params:
    multistepdecay: # 键名匹配
      milestones: [30, 60, 90]
      gamma: 0.1
    warmup:
      use_warmup: True
      warmup_steps: 500
      start_lr: 0.001
  create_library:
    output_library_path: model/face_library_resnet_arcface_multistep.pkl
  infer:
    face_library_path: model/face_library_resnet_arcface_multistep.pkl
    recognition_threshold: 0.5
  compare:
    compare_threshold: 0.8

resnet_arcface_cosine_config:
  model_type: resnet
  loss_type: arcface
  model:
    resnet_params:
      feature_dim: 512
      nf: 32
      n_resnet_blocks: 3
  loss:
    arcface_params:
      arcface_m1: 1.0
      arcface_m2: 0.5
      arcface_m3: 0.0
      arcface_s: 64.0
  batch_size: 32
  learning_rate: 0.001
  optimizer_type: AdamW
  optimizer_params:
    weight_decay: 0.0001
  # epochs: 100 # <-- 已移除
  image_size: 112
  num_classes: 100
  lr_scheduler_type: CosineAnnealingDecay
  lr_scheduler_params:
    cosineannealingdecay: # 键名匹配
      T_max: 100 # 通常设置为总epochs (现在会使用全局的epochs值)
      eta_min: 0
    warmup:
      use_warmup: True
      warmup_steps: 500
      start_lr: 0.001
  create_library:
    output_library_path: model/face_library_resnet_arcface_cosine.pkl
  infer:
    face_library_path: model/face_library_resnet_arcface_cosine.pkl
    recognition_threshold: 0.5
  compare:
    compare_threshold: 0.8

resnet_arcface_reduce_lr_lr_config: # 注意这里的键名可能有点问题，多了一个 _lr
  model_type: resnet
  loss_type: arcface
  model:
    resnet_params:
      feature_dim: 512
      nf: 32
      n_resnet_blocks: 3
  loss:
    arcface_params:
      arcface_m1: 1.0
      arcface_m2: 0.5
      arcface_m3: 0.0
      arcface_s: 64.0
  batch_size: 32
  learning_rate: 0.0001 # ReduceOnPlateau 通常配合较低的初始学习率
  optimizer_type: AdamW
  optimizer_params:
    weight_decay: 0.0001
  # epochs: 100 # <-- 已移除
  image_size: 112
  num_classes: 100
  lr_scheduler_type: ReduceOnPlateau
  lr_scheduler_params:
    reduceonplateau: # 键名匹配
      mode: 'min'
      factor: 0.1
      patience: 10
      threshold: 0.0001
      threshold_mode: 'rel'
      cooldown: 0
      min_lr: 0.0000001
      eps: 1e-08 # Preserve this here for now, will remove in factory
    warmup:
      use_warmup: false
      warmup_steps: 500
      start_lr: 0.001
  infer:
    face_library_path: 'model/face_library_resnet_arcface_reduce_lr.pkl'
    recognition_threshold: 0.5
    label_file: "readme.json"
    infer_visualize: true
  compare:
    compare_threshold: 0.8
    compare_visualize: true
  create_library:
    output_library_path: 'model/face_library_resnet_arcface_reduce_lr.pkl'

resnet_arcface_warm_restarts_config:
  model_type: resnet
  loss_type: arcface
  model:
    resnet_params:
      feature_dim: 512
      nf: 32
      n_resnet_blocks: 3
  loss:
    arcface_params:
      arcface_m1: 1.0
      arcface_m2: 0.5
      arcface_m3: 0.0
      arcface_s: 64.0
  batch_size: 32
  learning_rate: 0.001
  optimizer_type: AdamW
  optimizer_params:
    weight_decay: 0.0001
  lr_scheduler_type: CosineAnnealingWarmRestarts
  lr_scheduler_params:
    cosineannealingwarmrestarts: # 键名匹配
      T_0: 10
      T_mult: 2
      eta_min: 0
    warmup:
      use_warmup: True
      warmup_steps: 500
      start_lr: 0.001
  # epochs: 100 # <-- 已移除 (注意这里的 T_0 是周期，需要和总epoch数配合)
  image_size: 112
  num_classes: 100
  create_library:
    output_library_path: model/face_library_resnet_arcface_warm_restarts.pkl
  infer:
    face_library_path: model/face_library_resnet_arcface_warm_restarts.pkl
    recognition_threshold: 0.5
  compare:
    compare_threshold: 0.8